class Solution {
public:
    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
        while (extraStudents) {
            double maxi = -1.0;
            int idx = -1;
            for (int i = 0; i < classes.size(); i++) {
                double diff = (double)(classes[i][0]+1)/(classes[i][1]+1) - (double)(classes[i][0])/classes[i][1];
                if (diff > maxi) {
                    maxi = diff;
                    idx = i;
                }
            }
            classes[idx][0]++;
            classes[idx][1]++;
            extraStudents--;
        }
        double total = 0.0;
        for (int i = 0; i < classes.size(); i++) {
            total += (double)classes[i][0] / classes[i][1];
        }
        return total / classes.size();
    }
};



class Solution {
public:
    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
        priority_queue<pair<double,int>>pq;
        for (int i = 0; i < classes.size(); i++) {
            double diff = (double)(classes[i][0]+1)/(classes[i][1]+1)-(double)(classes[i][0])/classes[i][1];
            pq.push({diff,i});
        }
        while(extraStudents--){
            auto it =pq.top();
            pq.pop();
            double diff=it.first;
            int idx=it.second;
            classes[idx][0]++;
            classes[idx][1]++;
            diff = (double)(classes[idx][0]+1)/(classes[idx][1]+1)-(double)(classes[idx][0])/classes[idx][1];
            pq.push({diff,idx});
        }
        double total = 0.0;
        for (int i = 0; i < classes.size(); i++) {
            total += (double)(classes[i][0])/(classes[i][1]);
        }
        return total / classes.size();
    }
};



