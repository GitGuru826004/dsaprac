class Solution {
public:
    long long solve(vector<int>& nums,  int idx , bool even){
        if(idx==nums.size())return 0;
        long long  skip=solve(nums,idx+1,even);
        long long  take=(even ? nums[idx] : -nums[idx])+solve(nums,idx+1,!even);
        return max(skip,take);
    }
    long long maxAlternatingSum(vector<int>& nums) {
        //if even then curren no will be added
        // if odd then curren no will be subbtracyed    
        // At each index, we can either:
        // Take this number (flip even for next call)
        // Skip it (keep even same)
        int n=nums.size();
        return solve(nums,0,true); // as 0 idx is even so plus 
    }
};


class Solution {
public:
    vector<vector<long long>>dp;
    long long solve(vector<int>& nums,  int idx , bool even){
        if(idx==nums.size())return 0;
        if(dp[idx][even]!=-1)return dp[idx][even];
        long long  skip=solve(nums,idx+1,even);
        long long  take=(even ? nums[idx] : -nums[idx])+solve(nums,idx+1,!even);
        return dp[idx][even]=max(skip,take);
    }
    long long maxAlternatingSum(vector<int>& nums) {
        //if even then curren no will be added
        // if odd then curren no will be subbtracyed    
        // At each index, we can either:
        // Take this number (flip even for next call)
        // Skip it (keep even same)
        int n=nums.size();
        dp.resize(n+1,vector<long long>(2,-1));
        return solve(nums,0,true); // as 0 idx is even so plus 
    }
};




class Solution {
public:
    long long maxAlternatingSum(vector<int>& nums) {
        // bottom up mein past ke answers se present ka ans nikalte hain
        // dp[i][even]= koi elemt subsequence mein add hoke even length ka subsequence bana rha to iss case mein wo elemt  subtract hoga take =dp[i-1][odd]-nums[i] skip=dp[i-1][even],now take max
        // dp[i][odd]=koi elemt subsequence mein add hoke odd length ka subsequence bana rha to iss case mein wo elemt add hoga take = dp[i-1][even]+nums[i] , skip=dp[i-1][odd] , now take max
        int n=nums.size();
        vector<vector<long long>>dp(n+1,vector<long long>(2,0));
        dp[0][0]=0;
        dp[0][1]=nums[0];
        for(int i=1;i<n;i++){
            dp[i][0]=max(dp[i-1][1]-nums[i],dp[i-1][0]);
            dp[i][1]=max(dp[i-1][0]+nums[i],dp[i-1][1]);

        }
        return max(dp[n-1][0],dp[n-1][1]); 
    }
};


class Solution {
public:
    long long maxAlternatingSum(vector<int>& nums) {
        long long ans = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] > nums[i - 1])
                ans += nums[i] - nums[i - 1];
        }
        return ans;
    }
};
