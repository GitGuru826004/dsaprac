class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n =nums.size();
        vector<int>res;
        for(int i=0;i<=n-k;i++){
            int maxi=INT_MIN;
            for(int j=i;j<i+k;j++){
                if(nums[j]>maxi) maxi=nums[j];
            }
            res.push_back(maxi);
        }
        return res;
    }
};



class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n =nums.size();
        priority_queue<pair<int,int>>pq;
        vector<int>res;
        for(int i=0;i<n;i++){
            pq.push({nums[i],i});
            if(i>=k-1){
                while(pq.top().second<=i-k) pq.pop();
                res.push_back(pq.top().first);
            }
        }
        return res;
    }
};




We keep a deque of indices (not values). The deque stores indices in decreasing order of their array values (i.e., nums[dq[0]] >= nums[dq[1]] >= ...).

The front (dq.front()) is always the index of the maximum element for the current window.

When a new element arrives (index i), we remove all indices at the back whose values are smaller than nums[i] because they can never be the maximum while nums[i] is in the window.

We push i. Then we remove the front if it is outside the window (<= i-k). Finally, if we've formed a full window (i >= k-1), we record nums[dq.front()].


class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n =nums.size();
        deque<int>dq; // stores indices, values decreasing
        vector<int>res;
        for(int i=0;i<n;i++){
            // Remove smaller values from back â€” maintain decreasing order of values
            while(!dq.empty() && nums[dq.back()]<nums[i]) dq.pop_back();
            dq.push_back(i);
            // Remove indices outside window [i-k+1, i]
            if(dq.front()<=i-k) dq.pop_front();
            // If window is complete, front is max
            if(i>=k-1) res.push_back(nums[dq.front()]);
        }
        return res;
    }
};





