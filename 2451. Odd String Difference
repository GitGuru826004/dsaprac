class Solution {
public:
    string oddString(vector<string>& words) {
        int n = words.size();
        int t= words[0].size();
        vector<vector<int>>diffs;
        for (auto &temp : words) {
            vector<int> diff;
            for (int i = 1; i < t; i++) {
                diff.push_back(temp[i] - temp[i-1]);
            }
            diffs.push_back(diff); 
        }
        if (diffs[0] == diffs[1] || diffs[0] == diffs[2]){
            for (int i = 0; i < n; i++) {
                if (diffs[i] != diffs[0]) return words[i];
            }
        }
        return words[0];
    }
};


class Solution {
public:
    string oddString(vector<string>& words) {
        int n = words.size();
        int t= words[0].size();
        unordered_map<string,int>freq;
        vector<string>diffs;
        for (auto &temp : words) {
            string diff="";
            for (int i = 1; i < t; i++) {
                diff+=to_string(temp[i] - temp[i-1])+",";
            }
            freq[diff]++;
            diffs.push_back(diff); 
        }
        for (int i = 0; i < n; i++) {
            if (freq[diffs[i]] ==1) return words[i];
        }
        return words[0];
    }
};

class Solution {
public:
    string oddString(vector<string>& words) {
        int n = words.size();
        int t= words[0].size();
        unordered_map<string,int>freq;
        for (auto &temp : words) {
            string diff="";
            for (int i = 1; i < t; i++) {
                diff+=to_string(temp[i] - temp[i-1])+",";
            }
            freq[diff]++;
        }
        for (auto &temp : words) {
            string diff="";
            for (int i = 1; i < t; i++) {
                diff+=to_string(temp[i] - temp[i-1])+",";
            }
            if(freq[diff]==1) return temp;
        }
        return words[0];
    }
};



class Solution {
public:
    string oddString(vector<string>& words) {
        int n = words.size();
        int t= words[0].size();
        unordered_map<string,vector<string>>freq;
        for (auto &temp : words) {
            string diff="";
            for (int i = 1; i < t; i++) {
                diff+=to_string(temp[i] - temp[i-1])+",";
            }
            freq[diff].push_back(temp);
        }
        for (auto &cnt : freq) {
            if(cnt.second.size()==1) return cnt.second[0];
        }
        return words[0];
    }
};
