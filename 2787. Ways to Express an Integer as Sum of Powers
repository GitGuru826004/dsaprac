class Solution {
public:
    int dfs(int n,int idx,int x){
        if(n==0)return 1;
        if(idx>n)return 0;
        if(pow(idx,x)>n)return 0;
        int take= dfs(n-pow(idx,x),idx+1,x);
        int skip=dfs(n,idx+1,x);
        return take+skip;
    }
    int numberOfWays(int n, int x) {
        return dfs(n,1,x);
    }
};



class Solution {
public:
    vector<vector<int>>dp;
    int mod = 1e9 + 7;
    int dfs(int n,int idx,int x){
        if(n==0)return 1;
        if(idx>n)return 0;
        if(pow(idx,x)>n)return 0;
        if(dp[n][idx]!=-1) return dp[n][idx];
        int take= dfs(n-pow(idx,x),idx+1,x)%mod;
        int skip=dfs(n,idx+1,x)%mod;
        return dp[n][idx]=(take+skip)%mod;
    }
    int numberOfWays(int n, int x) {
        dp.resize(n+1,vector<int>(n+1,-1));
        return dfs(n,1,x);
    }
};
