class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        vector<int>res;
        bool up =true;
        int i=0;
        int j=0;
        while((int)res.size()<n*m){
            res.push_back(mat[i][j]);
            if(up){
                if(j==m-1){i++;up=false;}
                else if(i==0 && j<m-1){j++;up=false;}
                else {i--;j++;}
            } else{
                if(j==0 && i<n-1){i++;up=true;}
                else if(i==n-1){j++;up=true;}
                else {i++;j--;}
            }
        }
        return res;
    }
};



class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& mat) {
        int n = mat.size(), m = mat[0].size();
        vector<vector<int>> diag(n+m-1);
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                diag[i+j].push_back(mat[i][j]);
            }
        }
        
        vector<int> res; res.reserve(n*m);
        for(int d=0;d<n+m-1;d++){
            if(d%2==0) reverse(diag[d].begin(), diag[d].end());
            res.insert(res.end(), diag[d].begin(), diag[d].end());
        }
        return res;
    }
};

