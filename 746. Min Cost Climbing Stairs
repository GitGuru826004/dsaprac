class Solution {
public:
    vector<int> dp;

    int minCost(int i, vector<int>& cost) {
        int n = cost.size();
        if (i>=n) return 0;
        if (dp[i] != -1) return dp[i];        
        int one = cost[i] + minCost(i+2, cost);
        int two = cost[i]+ minCost(i+1, cost);
        return dp[i] = min(one,two);
    }

    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        dp.resize(n, -1);
        return min(minCost(0, cost), minCost(1, cost));
    }
};

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int> dp(n+1, -1);
        dp[0]=0;
        dp[1]=0;
        for(int i=2;i<=n;i++){
            int one = cost[i-1]+ dp[i-1];
            int two = cost[i-2]+ dp[i-2];
            dp[i] = min(one,two);
        }
        return dp[n];
    }
};
