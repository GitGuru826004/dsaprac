class Solution {
public:
    vector<vector<int>> spiralMatrixIII(int rows, int cols, int rStart, int cStart) {
        vector<vector<int>> ans;
        // Directions: east, south, west, north
        int dir[4][2] = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        int steps = 1; // number of steps in current direction
        int r = rStart, c = cStart;
        // add first position if valid
        if (r >= 0 && r < rows && c >= 0 && c < cols) {
            ans.push_back({r, c});
        }
        while ((int)ans.size() < rows * cols) {
            for (int d = 0; d < 4; d++) {
                // move 'steps' steps in this direction
                for (int i = 0; i < steps; i++) {
                    r += dir[d][0];
                    c += dir[d][1];
                    if (r >= 0 && r < rows && c >= 0 && c < cols) {
                        ans.push_back({r, c});
                        if ((int)ans.size() == rows * cols) return ans;
                    }
                }
                // after east & west moves, increase step size
                if (d % 2 == 1) steps++;
            }
        }

        return ans;
    }
};
