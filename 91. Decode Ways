class Solution {
public:
    bool isvalid(string temp){
        if(stoi(temp)>0 && stoi(temp)<27)return true;
        return false;
    }
    int solve(string &s,int i,int &n){
        if(i==n)return 1; // 1 valid partition mil gaya 
        if(s[i]=='0') return 0; // 0 ke aage sab bekar hai
        int takeone= solve(s,i+1,n);
        int taketwo=0;
        if(i+1<n && isvalid(s.substr(i,2)))taketwo=solve(s,i+2,n);
        return takeone+taketwo;
    }
    int numDecodings(string s) {
        int n = s.length();
        return solve(s,0,n);
    }
};


class Solution {
public:
    int solve(string &s,int i,int &n){
        if(i==n)return 1; // 1 valid partition mil gaya 
        if(s[i]=='0') return 0; // 0 ke aage sab bekar hai
        int takeone= solve(s,i+1,n);
        int taketwo=0;
        if(i+1<n && (s[i]=='1' || (s[i]=='2' && s[i+1]<='6')))taketwo=solve(s,i+2,n);
        return takeone+taketwo;
    }
    int numDecodings(string s) {
        int n = s.length();
        return solve(s,0,n);
    }
};



class Solution {
public:
    vector<int>dp;
    int solve(string &s,int i,int &n){
        if(i==n)return 1; // 1 valid partition mil gaya 
        if(s[i]=='0') return 0; // 0 ke aage sab bekar hai
        if(dp[i]!=-1)return dp[i];
        int takeone= solve(s,i+1,n);
        int taketwo=0;
        if(i+1<n && (s[i]=='1' || (s[i]=='2' && s[i+1]<='6')))taketwo=solve(s,i+2,n);
        return dp[i]=takeone+taketwo;
    }
    int numDecodings(string s) {
        int n = s.length();
        dp.resize(n,-1);
        return solve(s,0,n);
    }
};


class Solution {
public:
    vector<int>dp;
    bool isvalid(string temp){
        if(stoi(temp)>0 && stoi(temp)<27)return true;
        return false;
    }
    int solve(string &s,int i,int &n){
        if(i==n)return 1; // 1 valid partition mil gaya 
        if(s[i]=='0') return 0; // 0 ke aage sab bekar hai
        if(dp[i]!=-1)return dp[i];
        int takeone= solve(s,i+1,n);
        int taketwo=0;
        if(i+1<n && isvalid(s.substr(i,2)))taketwo=solve(s,i+2,n);
        return dp[i]=takeone+taketwo;
    }
    int numDecodings(string s) {
        int n = s.length();
        dp.resize(n,-1);
        return solve(s,0,n);
    }
};



class Solution {
public:
    bool isvalid(string temp){
        if(stoi(temp)>0 && stoi(temp)<27)return true;
        return false;
    }
    int numDecodings(string s) {
        int n = s.length();
        vector<int>dp(n+1,-1);
        dp[n]=1; // 1 valid partition mil gaya

        for(int i=n-1;i>=0;i--){
           if(s[i]=='0') dp[i]= 0; // 0 ke aage sab bekar hai 
           else {
            dp[i]=dp[i+1];
            if(i+1<n && isvalid(s.substr(i,2)))dp[i]+=dp[i+2];
           }
        }
        return dp[0];
    }
};


class Solution {
public:
    int numDecodings(string s) {
        int n = s.length();
        vector<int> dp(n+1, -1);
        dp[n] = 1; // 1 valid partition for empty string

        for(int i = n-1; i >= 0; i--){
            if(s[i] == '0') dp[i] = 0; // cannot start with 0
            else {
                dp[i] = dp[i+1]; // take one digit

                // take two digits if valid (10-26)
                if(i+1 < n && (s[i] == '1' || (s[i] == '2' && s[i+1] <= '6')))
                    dp[i] += dp[i+2];
            }
        }
        return dp[0];
    }
};
