/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> solve(int start,int end) {
        if(end<start)return {NULL};
        if(start==end){
            TreeNode* root=new TreeNode(start);
            return {root};
        }
        vector<TreeNode*>res;
        for(int i=start;i<=end;i++){
            vector<TreeNode*> left= solve(start,i-1);
            vector<TreeNode*> right= solve(i+1,end);

            for(TreeNode* x:left){
                for(TreeNode* y:right){
                    TreeNode* root=new TreeNode(i);
                    root->left=x;
                    root->right=y;
                    res.push_back(root);
                }
            }
        }
        return res;
    }
    vector<TreeNode*> generateTrees(int n) {
        return solve(1,n);
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<pair<int,int>,vector<TreeNode*>>mp;
    vector<TreeNode*> solve(int start,int end) {
        if(end<start)return {NULL};
        if(start==end){
            TreeNode* root=new TreeNode(start);
            return {root};
        }
        if(mp.find({start,end})!=mp.end())return mp[{start,end}];
        vector<TreeNode*>res;
        for(int i=start;i<=end;i++){
            vector<TreeNode*> left= solve(start,i-1);
            vector<TreeNode*> right= solve(i+1,end);

            for(TreeNode* x:left){
                for(TreeNode* y:right){
                    TreeNode* root=new TreeNode(i);
                    root->left=x;
                    root->right=y;
                    res.push_back(root);
                }
            }
        }
        return mp[{start,end}]=res;
    }
    vector<TreeNode*> generateTrees(int n) {
        return solve(1,n);
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<vector<TreeNode*>>>dp;
    vector<TreeNode*> solve(int start,int end) {
        if(end<start)return {NULL};
        if(start==end){
            TreeNode* root=new TreeNode(start);
            return {root};
        }
        if(!dp[start][end].empty())return dp[start][end];
        vector<TreeNode*>res;
        for(int i=start;i<=end;i++){
            vector<TreeNode*> left= solve(start,i-1);
            vector<TreeNode*> right= solve(i+1,end);

            for(TreeNode* x:left){
                for(TreeNode* y:right){
                    TreeNode* root=new TreeNode(i);
                    root->left=x;
                    root->right=y;
                    res.push_back(root);
                }
            }
        }
        return dp[start][end]=res;
    }
    vector<TreeNode*> generateTrees(int n) {
        dp.resize(n + 2, vector<vector<TreeNode*>>(n + 2));
        return solve(1,n);
    }
};




