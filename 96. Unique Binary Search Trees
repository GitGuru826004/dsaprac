class Solution {
public:
    int numTrees(int n) {
        if(n<=1)return 1;
        int res=0;
        for(int i=1;i<=n;i++){
            res+=numTrees(i-1)*numTrees(n-i);
        }
        return res; 
    }
};


class Solution {
public:
    vector<int>dp;
    int numTrees(int n) {
        if(n<=1)return 1;
        dp.resize(n+1,-1);
        if(dp[n]!=-1)return dp[n];
        int res=0;
        for(int i=1;i<=n;i++){
            res+=numTrees(i-1)*numTrees(n-i);
        }
        return dp[n]=res; 
    }
};
        

class Solution {
public:
    int numTrees(int n) {
        if(n<=1)return 1;
        vector<int>dp(n+1,0);
        dp[0]=1;
        dp[1]=1;
        for(int nodes = 2; nodes <= n; nodes++) {
            for(int root = 1; root <= nodes; root++) {
                dp[nodes] += dp[root-1] * dp[nodes-root];
            }
        }
        return dp[n]; 
    }
};
        
