class Solution {
public:
    vector<pair<int,int>>dirs={{1,0},{-1,0},{0,1},{0,-1}};
    int m,n,ans=0,cnt=0;
    void dfs(vector<vector<int>>& grid,vector<vector<bool>>& vis,int x,int y,int viscnt){
        if(grid[x][y]==2){
            if(viscnt==cnt)ans++;
            return;
        }
        vis[x][y]=true;
        for(auto &[dx,dy]:dirs){
            int nx=x+dx;
            int ny=y+dy;
            if(nx>=0 && ny>=0 && nx<m && ny<n && !vis[nx][ny] && grid[nx][ny]!=-1) dfs(grid,vis,nx,ny,viscnt+1);
        }
        vis[x][y]=false; //backtrack
        
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        m=grid.size();
        n=grid[0].size();
        int sx,sy;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if (grid[i][j] != -1)cnt++;
                if(grid[i][j] == 1){sx=i;sy=j;}
            }
        }
        vector<vector<bool>> vis(m,vector<bool>(n,false));
        dfs(grid,vis,sx,sy,1);
        return ans;
    }
};





