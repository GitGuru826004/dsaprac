class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {
        vector<vector<int>>res;
        for(auto x:firstList){
            for(auto y:secondList){
                int fs=x[0];
                int fe=x[1];
                int ss=y[0];
                int se=y[1];
                int start=max(fs,ss);
                int end= min(fe,se);
                if(start<=end)res.push_back({start,end});
            }
        }
        return res;
    }
};


class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList,
                                             vector<vector<int>>& secondList) {
        vector<vector<int>> res;
        int n = firstList.size();
        int m = secondList.size();
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            int fs = firstList[i][0];
            int fe = firstList[i][1];
            int ss = secondList[j][0];
            int se = secondList[j][1];
            int start = max(fs, ss);
            int end = min(fe, se);
            if (start <= end) res.push_back({start, end});
            if (fe < se) i++;
            else j++;
        }
        return res;
    }
};
